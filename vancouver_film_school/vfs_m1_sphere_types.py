"""
 GT Sphere Types - Sphere Types is a simple reminder for Modeling students that they don't need to only use the standard sphere.
 @Guilherme Trevisan - TrevisanGMW@gmail.com - 2020-11-04 - github.com/TrevisanGMW
 Tested on Maya 2020 - Windows 10
 
 1.1 - 2020-11-22
 Minor changes to the UI
 
 1.2 - 2020-12-03
 Platonic Sphere A is now created with soft normals
 
 1.3 - 2021-01-25
 Adjusted the size of the spacing between buttons
 
 1.3.1 - 2021-05-12
 Made script compatible with Python 3 (Maya 2022+)
 
 To do:
 Improve the generate window to give better feedback
 Add more sphere options
 Add sliders to control subdivision level
 
""" 
try:
    from shiboken2 import wrapInstance
except ImportError:
    from shiboken import wrapInstance

try:
    from PySide2 import QtWidgets, QtGui, QtCore
    from PySide2.QtGui import QIcon
    from PySide2.QtWidgets import QWidget
except ImportError:
    from PySide import QtWidgets, QtGui, QtCore
    from PySide.QtGui import QIcon, QWidget
    
import maya.cmds as cmds
import maya.mel as mel
import maya.OpenMayaUI as omui
import base64
import sys
import os

# Script Version
script_version = "1.3.1"

#Python Version
python_version = sys.version_info.major

def build_gui_sphere_type():
    ''' Builds the UI for GT Sphere Types '''
    if cmds.window("build_gui_sphere_type", exists =True):
        cmds.deleteUI("build_gui_sphere_type")    

    # main dialog Start Here =================================================================================

    build_gui_sphere_type = cmds.window("build_gui_sphere_type", title='Sphere Types - (v' + script_version + ')',\
                          titleBar=True,minimizeButton=False,maximizeButton=False, sizeable =True)
    cmds.window(build_gui_sphere_type, e=True, s=True, wh=[1,1])
    
    content_main = cmds.columnLayout(adj = True)
    
      
    # Generate Header Image
    icons_folder_dir = cmds.internalVar(userBitmapsDir=True) 
    header_img = icons_folder_dir + 'gt_m1_sphere_types.png'
        
    if os.path.isdir(icons_folder_dir) and os.path.exists(header_img) == False:
        image_enconded = ''
        #image_64_decode = base64.decodestring(image_enconded)
        image_64_decode = base64.b64decode(image_enconded)
        image_result = open(header_img, 'wb')
        image_result.write(image_64_decode)
        image_result.close()
    
    cmds.rowColumnLayout(numberOfColumns=1, columnWidth=[(1, 200), (2, 100),(3,10)], cs=[(1,10),(2,5),(3,5)])
    
    cmds.image( image=header_img )
    
  
    cmds.text("Sphere Options:")
    cmds.separator(h=5, p=content_main, st="none" )
    cmds.rowColumnLayout( p=content_main, numberOfColumns=3, columnWidth=[(1, 100), (2, 100),(3,10)], cs=[(1,10),(2,5),(3,5)])
    cmds.separator(h=3, p=content_main, st="none" )
    cmds.button( l ="Standard Sphere", c=lambda x:create_standard_sphere(), w=100)
    cmds.button( l ="Platonic Sphere A", c=lambda x:create_platonic_sphere_a())
    #cmds.separator(h=10, st="none" )
    cmds.rowColumnLayout(p=content_main, numberOfColumns=2, columnWidth=[(1, 100), (2, 100),(3,10)], cs=[(1,10),(2,5),(3,5)])
    cmds.button( l ="Cube Sphere", c=lambda x:create_cube_sphere(), w=100)
    cmds.button( l ="Platonic Sphere B", c=lambda x:create_platonic_sphere_b())
    cmds.separator(h=10, st="none" )
 
 
    # Show and Lock Window
    cmds.showWindow(build_gui_sphere_type)
    cmds.window(build_gui_sphere_type, e=True, s=False)
    
    # Set Window Icon
    qw = omui.MQtUtil.findWindow(build_gui_sphere_type)
    if python_version == 3:
        widget = wrapInstance(int(qw), QWidget)
    else:
        widget = wrapInstance(long(qw), QWidget)
    icon = QIcon(':/lambert.svg')
    
    widget.setWindowIcon(icon)

    # main dialog Ends Here =================================================================================


# Functions to get all the stuff we need

def create_standard_sphere():
    mel.eval('polySphere -r 1 -sx 20 -sy 20 -ax 0 1 0 -cuv 2 -ch 1; objectMoveCommand;')
    message = 'Create > Polygon Primitives > <span style=\"color:#FF0000;text-decoration:underline;\">Sphere</span>'
    cmds.inViewMessage(amg=message, pos='botLeft', fade=True, alpha=.9)
    
def create_platonic_sphere_a():
    mel.eval('polyPlatonic -primitive 4 -subdivisionMode 0 -subdivisions 1 -radius 1 -sphericalInflation 1;')
    sphere = cmds.ls(selection=True)
    cmds.polySoftEdge(sphere, a=180 )
    cmds.select(sphere)
    message = 'Create > Polygon Primitives > <span style=\"color:#FF0000;text-decoration:underline;\">Platonic Solid</span>'
    cmds.inViewMessage(amg=message, pos='botLeft', fade=True, alpha=.9)
    cmds.inViewMessage(amg='(Settings: Icosahedron, Quads, 1, 1, 1)', pos='botLeft', fade=True, alpha=.9)

def create_cube_sphere():
    mel.eval('polyCube -w 2.25 -h 2.25 -d 2.25 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -cuv 4 -ch 1;')
    mel.eval('polySmooth  -mth 0 -sdt 2 -ovb 1 -ofb 3 -ofc 0 -ost 0 -ocr 0 -dv 2 -bnr 1 -c 1 -kb 1 -ksb 1 -khe 0 -kt 1 -kmb 1 -suv 1 -peh 0 -sl 1 -dpe 1 -ps 0.1 -ro 1 -ch 1')
    #mel.eval('SelectToolOptionsMarkingMenu;')
    
    message = 'Create > Polygon Primitives > <span style=\"color:#FF0000;text-decoration:underline;\">Cube</span>'
    cmds.inViewMessage(amg=message, pos='botLeft', fade=True, alpha=.9)
    cmds.inViewMessage(amg='Mesh > <span style=\"color:#FF0000;text-decoration:underline;\">Smooth</span> (2x)', pos='botLeft', fade=True, alpha=.9)

def create_platonic_sphere_b():
    mel.eval('polyPlatonic -primitive 2 -subdivisionMode 0 -subdivisions 2 -radius 1 -sphericalInflation 1;')
    message = 'Create > Polygon Primitives > <span style=\"color:#FF0000;text-decoration:underline;\">Platonic Solid</span>'
    cmds.inViewMessage(amg=message, pos='botLeft', fade=True, alpha=.9)
    cmds.inViewMessage(amg='(Settings: Octaheadron, Quads, 2, 1, 1)', pos='botLeft', fade=True, alpha=.9)


# Build UI
if __name__ == "__main__":
    build_gui_sphere_type()